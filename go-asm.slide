The Go Assembler

Simon Pratt

simon@pr4tt.com
http://pr4tt.com
@simondavidpratt

* Disclaimer

* Rob Pike's 2016 Talk on the Go Assembler

- Video: [[https://www.youtube.com/watch?v=KINIAgRpkDA]]
- Slides: [[https://talks.golang.org/2016/asm.slide]]

* Summary

* What is Go's compilation process?

Go uses a machine-independent assembly language as an intermediate
representation between Go code and native binary.  Go's assembler
takes this assembly and produces native binaries.

* Why should I care?

In general, it's useful to know what's going on underneath the layers
of abstraction.

In particular, sometimes it's useful to bypass that abstraction.

- performance
- debugging
- to use an instruction not generated by the compiler

* Questions to Answer

- What is assembly?
- What does Go's assembly language look like?
- Why does it look this way?
- Why have an intermediate representation?
- Do other language toolchains have intermediate representations?
- How is Go assembly different?

* What is assembly?

- Computers execute sequences of instructions.
- An instruction is a sequence of bits.
- Assembly is the human-readable version.
- Example: National 32532

  Binary                        Assembly
  |00001|00000|000|11|          ADDD R1, R0 ; R0 = R1 + R0
  |R1   |R0   |ADD|D |

* What does Go assembly look like?

.iframe https://goasm.herokuapp.com/ 600 1000

* Why does it look this way? (Short answer)

Plan 9.

* Why does it look this way? (Long answer)

1986: Ken Thompson wrote a Plan 9 C compiler for the National 32000
architecture (among others), which generated assembly pseudocode.
Assembly pseudocode would be translated by machine-specific
assemblers.

Earliest versions of Go used these same assemblers.

Go 1.3: compiler generates (mostly) real instructions.

Go 1.5: replace machine-specific assemblers with a single Go assembler
and environment variables (GOOS and GOARCH).  Go assembly language
based on National 32000.

* Why an intermediate representation?

- Compilation to a single intermediate language avoids duplication.
- Translation from Go assembly to any other assembly is simple.

* Do other language toolchains have similar things?  (Short answer)

Yes.

- GCC C/C++ -> GENERIC -> GIMPLE -> RTL -> native binary
- LLVM C/C++ -> IR -> native binary

* Do other language toolchains have similar things?  (GCC front-end)

- GENERIC: C-like
  if (foo (a + b,c))
    c = b++ / a
  endif
  return c

- GIMPLE: a simple subset of GENERIC
  t1 = a + b
  t2 = foo (t1, c)
  if (t2 != 0) <L1,L2>
  L1:
  t3 = b
  b = b + 1
  c = t3 / a
  goto L3
  L2:
  L3:
  return c

Taken from [[http://www.airs.com/dnovillo/Papers/osdl2006.pdf]]

* Do other language toolchains have similar things?  (GCC back-end)

- RTL: Lisp-like Register Transfer Language 
  (set (reg:SI 140)
       (plus:SI (reg:SI 138)
                (reg:SI 139)))

Taken from [[https://en.wikipedia.org/wiki/Register_transfer_language]]

* Do other language toolchains have similar things?  (LLVM)

- C
  unsigned square_int(unsigned a) {
    return a*a;
  }

- IR
  define i32 @square_unsigned(i32 %a) {
    %1 = mul i32 %a, %a
    ret i32 %1
  }

Taken from [[https://idea.popcount.org/2013-07-24-ir-is-better-than-assembly/]]

* Aside: Static Single Assignment (SSA)

- In SSA form, each variable is assigned exactly once
- Variables in the original language that change value become _versioned_
- LLVM's IR is always in static single assignment (SSA) form
- As of Go 1.6, Go generates SSA assembly

* How is Go assembly different?

Go ships with an assembler that takes Go assembly as its input
language.  This means that it doesn't have to be an _intermediate_
representation after all.

* Summary

* Resources (Primary)

Rob Pike's 2016 Talk on the Go Assembler

- Video: [[https://www.youtube.com/watch?v=KINIAgRpkDA]]
- Slides: [[https://talks.golang.org/2016/asm.slide]]

A Quick Guide to Go's Assembler
.link https://golang.org/doc/asm

A Manual for the Plan 9 Assembler
.link http://plan9.bell-labs.com/sys/doc/asm.html

A Foray Into Go Assembly Programming
.link https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming

Goasm
.link https://goasm.herokuapp.com

* Resources (Supplemental)

National 32532 Datasheet
.link http://cpu-ns32k.net/files/NS32532.pdf

Go & Assembly (very out-of-date)
.link http://www.doxsey.net/blog/go-and-assembly

The design of LLVM
.link http://www.aosabook.org/en/llvm.html

GCC's intermediate representations
.link https://gcc.gnu.org/onlinedocs/gccint/GENERIC.html
.link https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html
.link https://gcc.gnu.org/onlinedocs/gccint/RTL.html
